{"version":3,"sources":["components/square.jsx","components/board.jsx","components/game.jsx","App.jsx","serviceWorker.js","index.js"],"names":["square","props","className","onClick","value","Board","status","useState","Array","fill","squares","setSquares","xIsNext","setxIsNext","renderSquare","i","sq","slice","calculateWinner","handleClick","lines","length","a","b","c","winner","Game","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gPAUeA,EARA,SAACC,GACZ,OACI,4BAAQC,UAAU,SAASC,QAAS,kBAAMF,EAAME,QAAQ,OACnDF,EAAMG,QC6EJC,EA9ED,SAACJ,GAAW,IA+CpBK,EA/CmB,EAEOC,mBAC5BC,MAAM,GAAGC,KAAK,OAHO,mBAEhBC,EAFgB,KAEPC,EAFO,OAMOJ,oBAAS,GANhB,mBAMhBK,EANgB,KAMPC,EANO,KAmBjBC,EAAe,SAACC,GACpB,OAAO,kBAAC,EAAD,CAAQX,MAAOM,EAAQK,GAAIZ,QAAS,kBAXzB,SAACY,GACnB,IAAMC,EAAKN,EAAQO,QACfC,EAAgBR,IAAYA,EAAQK,KAGxCC,EAAGD,GAAKH,EAAU,IAAM,IACxBD,EAAWK,GACXH,GAAYD,IAIqCO,CAAYJ,OAMzDG,EAAkB,SAACR,GAWvB,IAVA,IAAMU,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAL,EAAI,EAAGA,EAAIK,EAAMC,OAAQN,IAAK,CAAC,IAAD,cACnBK,EAAML,GADa,GAC9BO,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAId,EAAQY,IAAMZ,EAAQY,KAAOZ,EAAQa,IAAMb,EAAQY,KAAOZ,EAAQc,GACpE,OAAOd,EAAQY,GAGnB,OAAO,MAGHG,EAASP,EAAgBR,GAU/B,OANEJ,EADEmB,EACO,WAAaA,EAEb,iBAAmBb,EAAU,IAAM,KAK5C,6BACE,yBAAKV,UAAU,UAAUI,GACzB,yBAAKJ,UAAU,aACZY,EAAa,GACbA,EAAa,GACbA,EAAa,IAEhB,yBAAKZ,UAAU,aACZY,EAAa,GACbA,EAAa,GACbA,EAAa,IAEhB,yBAAKZ,UAAU,aACZY,EAAa,GACbA,EAAa,GACbA,EAAa,MC1DPY,EAfF,WACT,OACI,yBAAKxB,UAAU,QACX,yBAAKA,UAAU,cACX,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,aACX,8BACA,gCCEDyB,MATf,WACE,OACE,yBAAKzB,UAAU,OACb,2CACA,kBAAC,EAAD,QCIc0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6d8c3483.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst square = (props) => {\r\n    return (\r\n        <button className=\"square\" onClick={() => props.onClick('X')}>\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default square\r\n","import React, { useState } from 'react'\r\nimport Square from './square';\r\n\r\n\r\nconst Board = (props) => {\r\n\r\n  const [squares, setSquares] = useState(\r\n    Array(9).fill(null)\r\n  );\r\n\r\n  const [xIsNext, setxIsNext] = useState(true);\r\n\r\n\r\n  const handleClick = (i) => {\r\n    const sq = squares.slice();\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    sq[i] = xIsNext ? 'X' : 'O';\r\n    setSquares(sq);\r\n    setxIsNext(!xIsNext);\r\n  }\r\n\r\n  const renderSquare = (i) => {\r\n    return <Square value={squares[i]} onClick={() => handleClick(i)} />\r\n  }\r\n\r\n  //const status = 'Next player: ' + (xIsNext ? 'X' : 'O');\r\n\r\n\r\n  const calculateWinner = (squares) => {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return squares[a];\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  const winner = calculateWinner(squares);\r\n  let status;\r\n\r\n  if (winner) {\r\n    status = 'Winner: ' + winner;\r\n  } else {\r\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O');\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"status\">{status}</div>\r\n      <div className=\"board-row\">\r\n        {renderSquare(0)}\r\n        {renderSquare(1)}\r\n        {renderSquare(2)}\r\n      </div>\r\n      <div className=\"board-row\">\r\n        {renderSquare(3)}\r\n        {renderSquare(4)}\r\n        {renderSquare(5)}\r\n      </div>\r\n      <div className=\"board-row\">\r\n        {renderSquare(6)}\r\n        {renderSquare(7)}\r\n        {renderSquare(8)}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Board;","import React from 'react'\r\nimport Board from './board'\r\n\r\nconst Game = () => {\r\n    return (\r\n        <div className=\"game\">\r\n            <div className=\"game-board\">\r\n                <Board />\r\n            </div>\r\n            <div className=\"game-info\">\r\n                <div>{/* status */}</div>\r\n                <ol>{/* TODO */}</ol>\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Game\r\n","import React from 'react';\nimport './App.css';\nimport Game from './components/game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Tic Tac Toe</h1>\n      <Game></Game>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}